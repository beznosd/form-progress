{"version":3,"sources":["src/form-progress.js"],"names":["formProgress","settings","form","inputTypes","formElements","progress","proggressAttr","proggressStyleProperty","initialValue","minValue","maxValue","units","additionalElementsToTrack","formSelector","progressSelector","document","querySelector","console","error","map","item","toLowerCase","indexOf","changeableAdditinalElments","inputtableAdditinalElments","forEach","selector","elements","querySelectorAll","element","type","concat","formLength","existingElements","radiosNames","formElementType","inputType","radioElement","name","push","length","aditionalElements","aditionalElementsCount","aditionalElement","progressStep","Math","abs","allElements","trackedElements","checkedRadiosNames","filledElementsCount","i","checked","progressChecked","value","currentProgress","addEventListener","evt","input","target","tagName","increaseProgress","decreaseProgress","isFile","isSelect","index","splice","dir","window"],"mappings":"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","file":"dist/form-progress.js","sourcesContent":[";(function() {\n  const formProgress = (settings = {}) => {\n    let { \n      form,\n      inputTypes,\n      formElements,\n      progress, \n      proggressAttr,\n      proggressStyleProperty,\n      initialValue,\n      minValue,\n      maxValue,\n      units,\n      additionalElementsToTrack\n    } = settings;\n\n    /*\n    *  initializing of all values\n    */\n\n    const formSelector = form || '#progress-form';\n    const progressSelector = progress || '#progress-element';\n    proggressAttr = proggressAttr || 'style';\n    proggressStyleProperty = proggressStyleProperty || 'width';\n    initialValue = +initialValue || 0;\n    minValue = +minValue || 0;\n    maxValue = +maxValue || 100;\n    units = units || '%';\n\n    form = document.querySelector(formSelector);\n    progress = document.querySelector(progressSelector);\n\n    if (minValue >= maxValue) {\n      console.error('minValue should be lower than maxValue');\n      return;\n    }\n\n    if (!form) {\n      console.error(`Can\\'t get the form element by selector: ${formSelector}`);\n      return;\n    }\n\n    if (!progress) {\n      console.error(`Can\\'t get the progress element by selector: ${progressSelector}`);\n      return;\n    }\n\n    if (!inputTypes) {\n      inputTypes = [\n        'text', 'email', 'password', 'number', 'color', \n        'date', 'datetime', 'month', 'time', 'week',\n        'tel', 'search', 'url', 'range', 'file',\n        'checkbox', 'radio'\n      ];\n    } else {\n      // make all input types lowercase\n      inputTypes = inputTypes.map(item => item.toLowerCase());\n    }\n\n    if (!formElements) {\n      formElements = ['input', 'textarea', 'select'];\n    } else {\n      // make all input types lowercase\n      formElements = formElements.map(item => item.toLowerCase());\n      // if user has provided formElements and not provided 'input' element\n      // then we remove all input types, because user don't want to track default inputs\n      // but plugin will still track inputs that was provided in setting 'additionalElementsToTrack'\n      if (formElements.indexOf('input') < 0) {\n        inputTypes = [];\n      }\n    }\n  \n    // handle aditional elements and separate them to changeable and inputtable\n    let changeableAdditinalElments = [];\n    let inputtableAdditinalElments = [];\n    if (additionalElementsToTrack) {\n      additionalElementsToTrack.forEach((selector) => {\n        const elements = form.querySelectorAll(selector);\n        elements.forEach((element) => {\n          if (element.type === 'checkbox' || element.type === 'radio') {\n            changeableAdditinalElments = changeableAdditinalElments.concat(...elements);\n          } else {\n            inputtableAdditinalElments = inputtableAdditinalElments.concat(...elements);\n          }\n        });\n      });\n    }\n\n    /*\n    *  calculating the progress step\n    */\n\n    // find the count of all elements and inputs which we need to track\n    // console.log( form.querySelectorAll('textarea').length );\n    let formLength = 0;\n    let existingElements = [];\n\n    const radiosNames = [];\n    formElements.forEach((formElementType) => {\n      if (formElementType === 'input') {\n        inputTypes.forEach((inputType) => {\n          const elements = form.querySelectorAll(`input[type=\"${inputType}\"]`);\n          existingElements = existingElements.concat(...elements);\n          // consider radios only with differnet name attributes\n          if (inputType === 'radio') {\n            elements.forEach((radioElement) => {\n              if (radiosNames.indexOf(radioElement.name) === -1) {\n                formLength++;\n                radiosNames.push(radioElement.name);\n              }\n            });\n          } else {\n            formLength += elements.length;\n          }\n        });\n      } else {\n        const elements = form.querySelectorAll(formElementType);\n        existingElements = existingElements.concat(...elements);\n        formLength += elements.length;\n      }\n    });\n\n    // if aditional elements matches default input types, do not increase formLength\n    if (additionalElementsToTrack) {\n      const aditionalElements = [...changeableAdditinalElments, ...inputtableAdditinalElments];\n      let aditionalElementsCount = aditionalElements.length;\n\n      aditionalElements.forEach((aditionalElement) => {\n        if (existingElements.indexOf(aditionalElement) > -1) {\n          aditionalElementsCount--;\n        }\n      });\n\n      formLength += aditionalElementsCount;\n    }\n    \n    // calculate progress step for different cases\n    let progressStep = 0;\n    if (minValue < 0 && maxValue > 0) {\n      progressStep = (maxValue + Math.abs(minValue)) / formLength;\n    } else if (minValue >= 0 && maxValue > 0) {\n      progressStep = (maxValue - minValue) / formLength;\n    } else if (minValue < 0 && maxValue <= 0) {\n      progressStep = (Math.abs(maxValue) - Math.abs(minValue)) / formLength;\n    }\n\n    // calculate initial value, depends on already filled form elements\n    let allElements = [];\n    if (additionalElementsToTrack) {\n      allElements = [...changeableAdditinalElments, ...inputtableAdditinalElments];\n    }\n    allElements = [...allElements, ...existingElements];\n\n    const trackedElements = [];\n    const checkedRadiosNames = [];\n    let filledElementsCount = 0;\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n\n      if (trackedElements.indexOf(element) > -1) continue; \n      trackedElements.push(element);\n      \n      if (element.type === 'checkbox' || element.type === 'radio') {\n        if (element.checked) {\n          filledElementsCount++;\n          element.progressChecked = true;\n          if (element.type === 'radio') {\n            checkedRadiosNames.push(element.name);\n          }\n        }\n      } else if (element.value.length !== 0) {\n        filledElementsCount++;\n        element.progressChecked = true;\n      }\n    }\n\n    // set up current progress\n    let currentProgress = (filledElementsCount > 0) ? filledElementsCount * progressStep : minValue;\n\n    // initializing progress with initial value, by default 0\n    progress[proggressAttr][proggressStyleProperty] = currentProgress + units;\n\n    /*\n    * handling the form events\n    */\n    \n    // adding listener for text format inputs\n    if (formElements.indexOf('input') > -1 \n        || formElements.indexOf('textarea') > -1\n        || inputtableAdditinalElments.length) {\n      form.addEventListener('input', (evt) => {\n        let input = null;\n        if (inputTypes.indexOf(evt.target.type) > -1) {\n          input = evt.target;\n        }\n        if (formElements.indexOf('textarea') > -1 && evt.target.tagName === 'TEXTAREA') {\n          input = evt.target;\n        }\n        // handle aditional elements checkboxes\n        if (inputtableAdditinalElments.indexOf(evt.target) > -1) {\n          input = evt.target;\n        }\n\n        if (!input) return;\n        \n        // increase progress\n        if (input.value.length !== 0 && !input.progressChecked) {\n          increaseProgress();\n          input.progressChecked = true;\n        }\n\n        // decrease progress\n        if (input.value.length === 0 && input.progressChecked) {\n          // console.log(input.value.length);\n          // console.log(input.progressChecked);\n          decreaseProgress();\n          input.progressChecked = false;\n        }\n      }); // end text format inputs\n\n      // adding support for checkbox and radio\n      // preventing of attaching event if we have not changeable elements \n      if (formElements.indexOf('input') > -1 \n          || formElements.indexOf('select') > -1 \n          || changeableAdditinalElments.length) {\n        form.addEventListener('change', (evt) => {\n          let input = null;\n\n          if (inputTypes.indexOf('checkbox') > -1 && evt.target.type === 'checkbox') {\n            input = evt.target;\n          }\n\n          if (inputTypes.indexOf('radio') > -1 && evt.target.type === 'radio') {\n            if (checkedRadiosNames.indexOf(evt.target.name) === -1) {\n              input = evt.target;\n              checkedRadiosNames.push(evt.target.name);\n            }\n          }\n          \n          let isFile = false;\n          if (inputTypes.indexOf('file') > -1 && evt.target.type === 'file') {\n            input = evt.target;\n            isFile = true;\n          }\n          \n          let isSelect = false;\n          if (formElements.indexOf('select') > -1 && evt.target.tagName === 'SELECT') {\n            input = evt.target;\n            isSelect = true;\n          }\n\n          // handle aditional elements checkboxes and radios\n          if (changeableAdditinalElments.indexOf(evt.target) > -1) {\n            if (evt.target.type === 'radio') {\n              if (checkedRadiosNames.indexOf(evt.target.name) === -1) {\n                checkedRadiosNames.push(evt.target.name);\n                input = evt.target;\n              }\n            } else {\n              input = evt.target;\n            }\n          }\n          \n          if (!input) return;\n\n          // increase progress\n          if (input.checked && !input.progressChecked && !isFile && !isSelect) {\n            increaseProgress();\n            input.progressChecked = true;\n          }\n\n          // decrease progress\n          if (!input.checked && input.progressChecked && !isFile && !isSelect) {\n            decreaseProgress();\n            input.progressChecked = false;\n            if (evt.target.type === 'radio') {\n              const index = checkedRadiosNames.indexOf(evt.target.name);\n              if (index > 1) {\n                checkedRadiosNames.splice(index, 1);\n              }\n            }\n          }\n\n          // handle selects\n          if (isSelect || isFile) {\n            console.dir(input);\n            if (input.value.length && !input.progressChecked) {\n              increaseProgress();\n              input.progressChecked = true;\n            } \n            if (!input.value.length && input.progressChecked) {\n              decreaseProgress();\n              input.progressChecked = false;\n            }\n          }\n        });\n      }\n    } // end form elements check\n\n    function increaseProgress() {\n      currentProgress += progressStep;\n      if (currentProgress > maxValue) {\n        currentProgress = maxValue;\n      }\n      progress[proggressAttr][proggressStyleProperty] = currentProgress + units;              \n    }\n\n    function decreaseProgress() {\n      currentProgress -= progressStep;\n      if (currentProgress < initialValue) {\n        currentProgress = initialValue;\n      }\n      progress[proggressAttr][proggressStyleProperty] = currentProgress + units;              \n    }\n  }; // end formProgress\n\n\n  window.formProgress = formProgress;\n}());"]}