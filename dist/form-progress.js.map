{"version":3,"sources":["src/form-progress.js"],"names":[],"mappingsfile":"dist/form-progress.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n(function (global, factory) {\n  if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define('formProgress', factory);\n  } else {\n    global.formProgress = factory();\n  }\n})(typeof window !== 'undefined' ? window : undefined, function () {\n  var formProgress = function formProgress() {\n    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var form = settings.form,\n        inputTypes = settings.inputTypes,\n        formElements = settings.formElements,\n        progress = settings.progress,\n        proggressAttr = settings.proggressAttr,\n        proggressStyleProperty = settings.proggressStyleProperty,\n        initialValue = settings.initialValue,\n        minValue = settings.minValue,\n        maxValue = settings.maxValue,\n        units = settings.units,\n        valueContainer = settings.valueContainer;\n    var additionalElementsToTrack = settings.additionalElementsToTrack,\n        onChange = settings.onChange;\n\n    /*\n    *  initializing of all values\n    */\n\n    var formSelector = form || '#progress-form';\n    var progressSelector = progress || '#progress-element';\n    proggressAttr = proggressAttr || 'style';\n    proggressStyleProperty = proggressStyleProperty || 'width';\n    initialValue = +initialValue || 0;\n    minValue = +minValue || 0;\n    maxValue = +maxValue || 100;\n    units = units || '%';\n\n    form = document.querySelector(formSelector);\n    progress = document.querySelector(progressSelector);\n    valueContainer = document.querySelector(valueContainer);\n\n    if (minValue >= maxValue) {\n      console.error('minValue should be lower than maxValue');\n      return;\n    }\n\n    if (!form) {\n      console.error('Can\\'t get the form element by selector: ' + formSelector);\n      return;\n    }\n\n    if (!progress) {\n      console.error('Can\\'t get the progress element by selector: ' + progressSelector);\n      return;\n    }\n\n    if (!inputTypes) {\n      inputTypes = ['text', 'email', 'password', 'number', 'color', 'date', 'datetime', 'month', 'time', 'week', 'tel', 'search', 'url', 'range', 'file', 'checkbox', 'radio'];\n    } else {\n      inputTypes = inputTypes.map(function (item) {\n        return item.toLowerCase();\n      });\n    }\n\n    if (!formElements) {\n      formElements = ['input', 'textarea', 'select'];\n    } else {\n      formElements = formElements.map(function (item) {\n        return item.toLowerCase();\n      });\n      // if user has provided formElements and not provided 'input' elements\n      // then we remove all input types, because user don't want to track default inputs\n      // but plugin will still track inputs that was provided in setting 'additionalElementsToTrack'\n      if (formElements.indexOf('input') < 0) {\n        inputTypes = [];\n      }\n    }\n\n    // handle aditional elements and separate them to changeable and inputtable\n    var changeableAdditinalElments = [];\n    var inputtableAdditinalElments = [];\n    if (additionalElementsToTrack) {\n      additionalElementsToTrack.forEach(function (selector) {\n        var elements = form.querySelectorAll(selector);\n        elements.forEach(function (element) {\n          if (element.type === 'checkbox' || element.type === 'radio') {\n            var _changeableAdditinalE;\n\n            changeableAdditinalElments = (_changeableAdditinalE = changeableAdditinalElments).concat.apply(_changeableAdditinalE, _toConsumableArray(elements));\n          } else {\n            var _inputtableAdditinalE;\n\n            inputtableAdditinalElments = (_inputtableAdditinalE = inputtableAdditinalElments).concat.apply(_inputtableAdditinalE, _toConsumableArray(elements));\n          }\n        });\n      });\n    }\n\n    /*\n    *  calculating the progress step\n    */\n\n    // find the count of all elements and inputs which we need to track\n    var formLength = 0;\n    var existingElements = []; // all elements that should be tracked\n    var radiosNames = []; // keep here only different radio names\n\n    formElements.forEach(function (formElementType) {\n      if (formElementType === 'input') {\n        inputTypes.forEach(function (inputType) {\n          var _existingElements;\n\n          var elements = form.querySelectorAll('input[type=\"' + inputType + '\"]');\n          existingElements = (_existingElements = existingElements).concat.apply(_existingElements, _toConsumableArray(elements));\n          // consider radios only with differnet name attributes\n          if (inputType === 'radio') {\n            elements.forEach(function (radioElement) {\n              if (radiosNames.indexOf(radioElement.name) === -1) {\n                formLength++;\n                radiosNames.push(radioElement.name);\n              }\n            });\n          } else {\n            formLength += elements.length;\n          }\n        });\n      } else {\n        var _existingElements2;\n\n        var elements = form.querySelectorAll(formElementType);\n        existingElements = (_existingElements2 = existingElements).concat.apply(_existingElements2, _toConsumableArray(elements));\n        formLength += elements.length;\n      }\n    });\n\n    // if aditional elements matches default input types, do not increase formLength\n    var aditionalElements = [];\n    if (additionalElementsToTrack) {\n      (function () {\n        aditionalElements = [].concat(_toConsumableArray(changeableAdditinalElments), _toConsumableArray(inputtableAdditinalElments));\n        var aditionalElementsCount = aditionalElements.length;\n\n        aditionalElements.forEach(function (aditionalElement) {\n          if (existingElements.indexOf(aditionalElement) > -1) {\n            aditionalElementsCount--;\n          }\n        });\n\n        formLength += aditionalElementsCount;\n      })();\n    }\n\n    // calculate progress step for different cases\n    var progressStep = 0;\n    if (minValue < 0 && maxValue > 0) {\n      progressStep = (maxValue + Math.abs(minValue)) / formLength;\n    } else if (minValue >= 0 && maxValue > 0) {\n      progressStep = (maxValue - minValue) / formLength;\n    } else if (minValue < 0 && maxValue <= 0) {\n      progressStep = (Math.abs(maxValue) - Math.abs(minValue)) / formLength;\n    }\n\n    // calculate initial value, depends on already filled form elements\n    var allElements = [];\n    if (additionalElementsToTrack) {\n      allElements = [].concat(_toConsumableArray(aditionalElements), _toConsumableArray(existingElements));\n    } else {\n      allElements = [].concat(_toConsumableArray(existingElements));\n    }\n\n    var trackedElements = [];\n    var checkedRadiosNames = [];\n    var filledElementsCount = 0;\n    for (var i = 0; i < allElements.length; i++) {\n      var element = allElements[i];\n\n      if (trackedElements.indexOf(element) > -1) continue;\n      trackedElements.push(element);\n\n      if (element.type === 'checkbox' || element.type === 'radio') {\n        if (element.checked) {\n          filledElementsCount++;\n          element.progressChecked = true;\n          if (element.type === 'radio') {\n            checkedRadiosNames.push(element.name);\n          }\n        }\n      } else if (element.value.length !== 0) {\n        filledElementsCount++;\n        element.progressChecked = true;\n      }\n    }\n\n    // set up current progress\n    var currentProgress = filledElementsCount > 0 ? filledElementsCount * progressStep : minValue;\n\n    // initializing progress with initial value, by default 0\n    progress[proggressAttr][proggressStyleProperty] = currentProgress + units;\n\n    // initializing value container\n    var progressInPercents = getPercents(minValue, maxValue, currentProgress);\n    updateValueContainer(valueContainer, progressInPercents);\n\n    // fire callback\n    if (progressInPercents > 0 && typeof onChange === 'function') {\n      onChange(null, progressInPercents);\n    }\n\n    /*\n    * handling the form events\n    */\n\n    // adding listener for text format inputs\n    // check if we have inputable elements \n    if (formElements.indexOf('input') > -1 || formElements.indexOf('textarea') > -1 || inputtableAdditinalElments.length) {\n      form.addEventListener('input', function (evt) {\n        var input = null;\n        if (inputTypes.indexOf(evt.target.type) > -1) {\n          input = evt.target;\n        }\n        if (formElements.indexOf('textarea') > -1 && evt.target.tagName === 'TEXTAREA') {\n          input = evt.target;\n        }\n        // handle aditional elements checkboxes\n        if (inputtableAdditinalElments.indexOf(evt.target) > -1) {\n          input = evt.target;\n        }\n\n        if (!input) return;\n\n        // increase progress\n        if (input.value.length !== 0 && !input.progressChecked) {\n          increaseProgress(input);\n          input.progressChecked = true;\n        }\n\n        // decrease progress\n        if (input.value.length === 0 && input.progressChecked) {\n          decreaseProgress(input);\n          input.progressChecked = false;\n        }\n      }); // end inputable inputs event listener\n    } // end check for inputable inputs existance\n\n    // adding support for checkbox and radio\n    // check if we have changeable elements\n    if (formElements.indexOf('input') > -1 || formElements.indexOf('select') > -1 || changeableAdditinalElments.length) {\n      form.addEventListener('change', function (evt) {\n        var input = null;\n\n        if (inputTypes.indexOf('checkbox') > -1 && evt.target.type === 'checkbox') {\n          input = evt.target;\n        }\n\n        if (inputTypes.indexOf('radio') > -1 && evt.target.type === 'radio') {\n          if (checkedRadiosNames.indexOf(evt.target.name) === -1) {\n            input = evt.target;\n            checkedRadiosNames.push(evt.target.name);\n          }\n        }\n\n        var isFile = false;\n        if (inputTypes.indexOf('file') > -1 && evt.target.type === 'file') {\n          input = evt.target;\n          isFile = true;\n        }\n\n        var isSelect = false;\n        if (formElements.indexOf('select') > -1 && evt.target.tagName === 'SELECT') {\n          input = evt.target;\n          isSelect = true;\n        }\n\n        // handle aditional elements checkboxes and radios\n        if (changeableAdditinalElments.indexOf(evt.target) > -1) {\n          if (evt.target.type === 'radio') {\n            if (checkedRadiosNames.indexOf(evt.target.name) === -1) {\n              checkedRadiosNames.push(evt.target.name);\n              input = evt.target;\n            }\n          } else {\n            input = evt.target;\n          }\n        }\n\n        if (!input) return;\n\n        // increase progress radios and checkboxes (selects and files below)\n        if (input.checked && !input.progressChecked && !isFile && !isSelect) {\n          increaseProgress(input);\n          input.progressChecked = true;\n        }\n\n        // decrease progress\n        if (!input.checked && input.progressChecked && !isFile && !isSelect) {\n          decreaseProgress(input);\n          input.progressChecked = false;\n          if (evt.target.type === 'radio') {\n            var index = checkedRadiosNames.indexOf(evt.target.name);\n            if (index > 1) {\n              checkedRadiosNames.splice(index, 1);\n            }\n          }\n        }\n\n        // handle selects and files\n        if (isSelect || isFile) {\n          if (input.value.length && !input.progressChecked) {\n            increaseProgress(input);\n            input.progressChecked = true;\n          }\n          if (!input.value.length && input.progressChecked) {\n            decreaseProgress(input);\n            input.progressChecked = false;\n          }\n        }\n      }); // end changeable inputs eventlistener\n    } // end check for changeable inputs existance\n\n    var increaseProgress = function increaseProgress(input) {\n      currentProgress += progressStep;\n      if (currentProgress > maxValue) {\n        currentProgress = maxValue;\n      }\n      // change styles for progress elements\n      progress[proggressAttr][proggressStyleProperty] = currentProgress + units;\n      // change value in value container\n      var progressInPercents = getPercents(minValue, maxValue, currentProgress);\n      updateValueContainer(valueContainer, progressInPercents);\n      // fire callback\n      if (typeof onChange === 'function') {\n        onChange(input, progressInPercents);\n      }\n    };\n\n    var decreaseProgress = function decreaseProgress(input) {\n      currentProgress -= progressStep;\n      if (currentProgress < initialValue) {\n        currentProgress = initialValue;\n      }\n      // change styles for progress elements\n      progress[proggressAttr][proggressStyleProperty] = currentProgress + units;\n      // change value in value container\n      var progressInPercents = getPercents(minValue, maxValue, currentProgress);\n      updateValueContainer(valueContainer, progressInPercents);\n      // fire callback\n      if (typeof onChange === 'function') {\n        onChange(input, progressInPercents);\n      }\n    };\n  }; // end formProgress\n\n  var updateValueContainer = function updateValueContainer(container, value) {\n    if (container) {\n      container.innerHTML = value;\n    }\n  };\n\n  var getPercents = function getPercents(minValue, maxValue, currentValue) {\n    var interval = void 0;\n\n    if (minValue < 0 && maxValue > 0) {\n      interval = Math.abs(minValue) + maxValue;\n    } else if (minValue >= 0 && maxValue > 0) {\n      interval = maxValue - minValue;\n    } else if (minValue < 0 && maxValue <= 0) {\n      interval = Math.abs(minValue) - Math.abs(maxValue);\n    }\n\n    return Math.round(currentValue * 100 / interval);\n  };\n\n  return formProgress;\n});\n"]}