{"version":3,"sources":["src/form-progress.js"],"names":["formProgress","settings","form","inputTypes","formElements","progress","proggressAttr","proggressStyleProperty","initialValue","maxValue","units","additionalElementsToTrack","formSelector","progressSelector","document","querySelector","console","error","map","item","toLowerCase","changeableAdditinalElments","inputtableAdditinalElments","forEach","selector","elements","querySelectorAll","element","type","concat","formLength","existingElements","radiosNames","formElementType","inputType","radioElement","indexOf","name","push","length","aditionalElements","aditionalElementsCount","aditionalElement","progressStep","currentProgress","addEventListener","evt","input","target","tagName","value","progressChecked","increaseProgress","decreaseProgress","checkedRadiosNames","isFile","isSelect","checked","index","splice","dir","window"],"mappings":"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","file":"dist/form-progress.js","sourcesContent":[";(function() {\n  const formProgress = (settings = {}) => {\n    let { \n      form,\n      inputTypes,\n      formElements,\n      progress, \n      proggressAttr,\n      proggressStyleProperty,\n      initialValue,\n      maxValue,\n      units,\n      additionalElementsToTrack\n    } = settings;\n\n    /*\n    *  initializing of all values\n    */\n\n    const formSelector = form || '#progress-form';\n    const progressSelector = progress || '#progress-element';\n    proggressAttr = proggressAttr || 'style';\n    proggressStyleProperty = proggressStyleProperty || 'width';\n    initialValue = +initialValue || 0;\n    maxValue = +maxValue || 100;\n    units = units || '%';\n\n    form = document.querySelector(formSelector);\n    progress = document.querySelector(progressSelector);\n\n    if (!form) {\n      console.error(`Can\\'t get the form element by selector: ${formSelector}`);\n      return;\n    }\n\n    if (!progress) {\n      console.error(`Can\\'t get the progress element by selector: ${progressSelector}`);\n      return;\n    }\n\n    if (!inputTypes) {\n      inputTypes = [\n        'text', 'email', 'password', 'number', 'color', \n        'date', 'datetime', 'month', 'time', 'week',\n        'tel', 'search', 'url', 'range', 'file',\n        'checkbox', 'radio'\n      ];\n    } else {\n      // make all input types lowercase\n      inputTypes = inputTypes.map(item => item.toLowerCase());\n    }\n\n    if (!formElements) {\n      formElements = ['input', 'textarea', 'select'];\n    } else {\n      // make all input types lowercase\n      formElements = formElements.map(item => item.toLowerCase());\n    }\n  \n    // handle aditional elements and separate them to changeable and inputtable\n    let changeableAdditinalElments = [];\n    let inputtableAdditinalElments = [];\n    if (additionalElementsToTrack) {\n      additionalElementsToTrack.forEach((selector) => {\n        const elements = form.querySelectorAll(selector);\n        elements.forEach((element) => {\n          if (element.type === 'checkbox' || element.type === 'radio') {\n            changeableAdditinalElments = changeableAdditinalElments.concat(...elements);\n          } else {\n            inputtableAdditinalElments = inputtableAdditinalElments.concat(...elements);\n          }\n        });\n      });\n    }\n\n    // console.log(changeableAdditinalElments);\n    // console.log(inputtableAdditinalElments);\n    // console.log(formElements);\n    // console.log(inputTypes);\n\n    /*\n    *  calculating the progress step\n    */\n\n    // find the count of all elements and inputs which we need to track\n    // console.log( form.querySelectorAll('textarea').length );\n    let formLength = 0;\n    let existingElements = [];\n\n    const radiosNames = [];\n    formElements.forEach((formElementType) => {\n      if (formElementType === 'input') {\n        inputTypes.forEach((inputType) => {\n          const elements = form.querySelectorAll(`input[type=\"${inputType}\"]`);\n          existingElements = existingElements.concat(...elements);\n          // consider radios only with differnet name attributes\n          if (inputType === 'radio') {\n            elements.forEach((radioElement) => {\n              if (radiosNames.indexOf(radioElement.name) === -1) {\n                formLength++;\n                radiosNames.push(radioElement.name);\n              }\n            });\n          } else {\n            formLength += elements.length;\n          }\n        });\n      } else {\n        const elements = form.querySelectorAll(formElementType);\n        existingElements = existingElements.concat(...elements);\n        formLength += elements.length;\n      }\n    });\n\n    // if aditional elements matches default input types, do not increase formLength\n    if (additionalElementsToTrack) {\n      const aditionalElements = [...changeableAdditinalElments, ...inputtableAdditinalElments];\n      let aditionalElementsCount = aditionalElements.length;\n\n      aditionalElements.forEach((aditionalElement) => {\n        if (existingElements.indexOf(aditionalElement) > -1) {\n          aditionalElementsCount--;\n        }\n      });\n\n      formLength += aditionalElementsCount;\n    }\n\n    const progressStep = (maxValue - initialValue) / formLength;\n    let currentProgress = initialValue;\n\n    // initializing progress with initial value, by default 0\n    progress[proggressAttr][proggressStyleProperty] = currentProgress + units;\n\n    /*\n    * handling the form events\n    */\n    \n    // adding listener for text format inputs\n    if (formElements.indexOf('input') > -1 \n        || formElements.indexOf('textarea') > -1\n        || inputtableAdditinalElments.length) {\n      form.addEventListener('input', (evt) => {\n        let input = null;\n        if (inputTypes.indexOf(evt.target.type) > -1) {\n          input = evt.target;\n        }\n        if (formElements.indexOf('textarea') > -1 && evt.target.tagName === 'TEXTAREA') {\n          input = evt.target;\n        }\n        // handle aditional elements checkboxes\n        if (inputtableAdditinalElments.indexOf(evt.target) > -1) {\n          input = evt.target;\n        }\n\n        if (!input) return;\n        \n        // increase progress\n        if (input.value.length !== 0 && !input.progressChecked) {\n          increaseProgress();\n          input.progressChecked = true;\n        }\n\n        // decrease progress\n        if (input.value.length === 0 && input.progressChecked) {\n          // console.log(input.value.length);\n          // console.log(input.progressChecked);\n          decreaseProgress();\n          input.progressChecked = false;\n        }\n      }); // end text format inputs\n\n      // adding support for checkbox and radio\n      const checkedRadiosNames = [];\n      // preventing of attaching event if we have not changeable elements \n      if (formElements.indexOf('input') > -1 \n          || formElements.indexOf('select') > -1 \n          || changeableAdditinalElments.length) {\n        form.addEventListener('change', (evt) => {\n          let input = null;\n\n          if (inputTypes.indexOf('checkbox') > -1 && evt.target.type === 'checkbox') {\n            input = evt.target;\n          }\n\n          if (inputTypes.indexOf('radio') > -1 && evt.target.type === 'radio') {\n            if (checkedRadiosNames.indexOf(evt.target.name) === -1) {\n              input = evt.target;\n              checkedRadiosNames.push(evt.target.name);\n            }\n          }\n          \n          let isFile = false;\n          if (inputTypes.indexOf('file') > -1 && evt.target.type === 'file') {\n            input = evt.target;\n            isFile = true;\n          }\n          \n          let isSelect = false;\n          if (formElements.indexOf('select') > -1 && evt.target.tagName === 'SELECT') {\n            input = evt.target;\n            isSelect = true;\n          }\n\n          // handle aditional elements checkboxes and radios\n          if (changeableAdditinalElments.indexOf(evt.target) > -1) {\n            if (evt.target.type === 'radio') {\n              if (checkedRadiosNames.indexOf(evt.target.name) === -1) {\n                checkedRadiosNames.push(evt.target.name);\n                input = evt.target;\n              }\n            } else {\n              input = evt.target;\n            }\n          }\n          \n          if (!input) return;\n\n          // increase progress\n          if (input.checked && !input.progressChecked && !isFile && !isSelect) {\n            increaseProgress();\n            input.progressChecked = true;\n          }\n\n          // decrease progress\n          if (!input.checked && input.progressChecked && !isFile && !isSelect) {\n            decreaseProgress();\n            input.progressChecked = false;\n            if (evt.target.type === 'radio') {\n              const index = checkedRadiosNames.indexOf(evt.target.name);\n              if (index > 1) {\n                checkedRadiosNames.splice(index, 1);\n              }\n            }\n          }\n\n          // handle selects\n          if (isSelect || isFile) {\n            console.dir(input);\n            if (input.value.length && !input.progressChecked) {\n              increaseProgress();\n              input.progressChecked = true;\n            } \n            if (!input.value.length && input.progressChecked) {\n              decreaseProgress();\n              input.progressChecked = false;\n            }\n          }\n        });\n      }\n    } // end form elements check\n\n    function increaseProgress() {\n      currentProgress += progressStep;\n      if (currentProgress > maxValue) {\n        currentProgress = maxValue;\n      }\n      progress[proggressAttr][proggressStyleProperty] = currentProgress + units;              \n    }\n\n    function decreaseProgress() {\n      currentProgress -= progressStep;\n      if (currentProgress < initialValue) {\n        currentProgress = initialValue;\n      }\n      progress[proggressAttr][proggressStyleProperty] = currentProgress + units;              \n    }\n  }; // end formProgress\n\n\n  window.formProgress = formProgress;\n}());"]}